// <auto-generated />
using System;
using Architecture.Core.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Architecture.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210121183202_rename-branchId-to-BranchInfoId")]
    partial class renamebranchIdtoBranchInfoId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AppUserStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("AppUserTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPassChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AppUserStatusId");

                    b.HasIndex("AppUserTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Architecture.Core.Entities.BranchInfo", b =>
                {
                    b.Property<int>("BranchInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("AgreementStart")
                        .HasColumnType("Date");

                    b.Property<string>("BranchLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("NumberOfUser")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.HasKey("BranchInfoId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("BranchInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.Example", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("Architecture.Core.Entities.JobInfo", b =>
                {
                    b.Property<int>("JobInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChildAgeMax")
                        .HasColumnType("int");

                    b.Property<int?>("ChildAgeMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("DaysToBeExpairedNationalId")
                        .HasColumnType("int");

                    b.Property<int?>("DaysToBeExpairedPassport")
                        .HasColumnType("int");

                    b.Property<int?>("DaysToBeExpairedResidencePermit")
                        .HasColumnType("int");

                    b.Property<int?>("DaysToExpairJobContract")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DocumentLink")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<bool>("HasUnlimitedResidencePermit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ISEEClassTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ISEEMax")
                        .HasColumnType("int");

                    b.Property<int?>("ISEEMin")
                        .HasColumnType("int");

                    b.Property<bool>("IsCommon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEligibleForCityzenShipApply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEligibleForUnlimitedResidencePermit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHighlighted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPregnant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("JobDeliveryTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfChild")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("OperatorTimeFrame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("JobInfoId");

                    b.HasIndex("ISEEClassTypeId");

                    b.HasIndex("JobDeliveryTypeId");

                    b.HasIndex("OccupationTypeId");

                    b.ToTable("JobInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.JobSectionLink", b =>
                {
                    b.Property<int>("JobSectionLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("JobInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionNameId")
                        .HasColumnType("int");

                    b.HasKey("JobSectionLinkId");

                    b.HasIndex("JobInfoId");

                    b.HasIndex("RecordStatusId");

                    b.HasIndex("SectionNameId");

                    b.ToTable("JobSectionLinks");
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AddressTypeId");

                    b.ToTable("LU_AddressType");

                    b.HasData(
                        new
                        {
                            AddressTypeId = 1,
                            AddressTypeName = "Permanent",
                            IsActive = true
                        },
                        new
                        {
                            AddressTypeId = 2,
                            AddressTypeName = "Temporary",
                            IsActive = true
                        },
                        new
                        {
                            AddressTypeId = 3,
                            AddressTypeName = "Previous Permanent",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.AppUserStatus", b =>
                {
                    b.Property<int>("AppUserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserStatusTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AppUserStatusId");

                    b.ToTable("LU_AppUserStatus");

                    b.HasData(
                        new
                        {
                            AppUserStatusId = 1,
                            AppUserStatusTitle = "Approved",
                            IsActive = true
                        },
                        new
                        {
                            AppUserStatusId = 2,
                            AppUserStatusTitle = "Rejected",
                            IsActive = true
                        },
                        new
                        {
                            AppUserStatusId = 3,
                            AppUserStatusTitle = "Request For Approval",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.AppUserType", b =>
                {
                    b.Property<int>("AppUserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserTypeTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AppUserTypeId");

                    b.ToTable("LU_AppAppUserType");

                    b.HasData(
                        new
                        {
                            AppUserTypeId = 1,
                            AppUserTypeTitle = "Client",
                            IsActive = true
                        },
                        new
                        {
                            AppUserTypeId = 2,
                            AppUserTypeTitle = "Branch User",
                            IsActive = true
                        },
                        new
                        {
                            AppUserTypeId = 3,
                            AppUserTypeTitle = "Other",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AssetTypeId");

                    b.ToTable("LU_AssetType");

                    b.HasData(
                        new
                        {
                            AssetTypeId = 1,
                            AssetTypeName = "House",
                            IsActive = true
                        },
                        new
                        {
                            AssetTypeId = 2,
                            AssetTypeName = "Car",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.BankName", b =>
                {
                    b.Property<int>("BankNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BankNameId");

                    b.ToTable("LU_BankName");

                    b.HasData(
                        new
                        {
                            BankNameId = 1,
                            BankDescription = "UniCredit Bank",
                            IsActive = true
                        },
                        new
                        {
                            BankNameId = 2,
                            BankDescription = "Intesa San Paolo",
                            IsActive = true
                        },
                        new
                        {
                            BankNameId = 3,
                            BankDescription = "UBI Bank",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ContractTypeId");

                    b.ToTable("LU_ContractType");

                    b.HasData(
                        new
                        {
                            ContractTypeId = 1,
                            ContractTypeName = "No Limit",
                            IsActive = true
                        },
                        new
                        {
                            ContractTypeId = 2,
                            ContractTypeName = "Limited",
                            IsActive = true
                        },
                        new
                        {
                            ContractTypeId = 3,
                            ContractTypeName = "Occational",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.CountryName", b =>
                {
                    b.Property<int>("CountryNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CountryNameId");

                    b.ToTable("LU_CountryName");

                    b.HasData(
                        new
                        {
                            CountryNameId = 1,
                            CountryDescription = "Italy",
                            IsActive = true
                        },
                        new
                        {
                            CountryNameId = 2,
                            CountryDescription = "Bangladesh",
                            IsActive = true
                        },
                        new
                        {
                            CountryNameId = 3,
                            CountryDescription = "Germany",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.DegreeType", b =>
                {
                    b.Property<int>("DegreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DegreeTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DegreeTypeId");

                    b.ToTable("LU_DegreeType");

                    b.HasData(
                        new
                        {
                            DegreeTypeId = 1,
                            DegreeTypeName = "Bachelor",
                            IsActive = true
                        },
                        new
                        {
                            DegreeTypeId = 2,
                            DegreeTypeName = "Masters",
                            IsActive = true
                        },
                        new
                        {
                            DegreeTypeId = 3,
                            DegreeTypeName = "High School",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("LU_DocumentType");

                    b.HasData(
                        new
                        {
                            DocumentTypeId = 1,
                            DocumentName = "Passport",
                            IsActive = true
                        },
                        new
                        {
                            DocumentTypeId = 2,
                            DocumentName = "Driving License",
                            IsActive = true
                        },
                        new
                        {
                            DocumentTypeId = 3,
                            DocumentName = "National Id",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.EyeColor", b =>
                {
                    b.Property<int>("EyeColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EyeColorId");

                    b.ToTable("LU_EyeColor");

                    b.HasData(
                        new
                        {
                            EyeColorId = 1,
                            Description = "Red",
                            IsActive = true
                        },
                        new
                        {
                            EyeColorId = 2,
                            Description = "Blue",
                            IsActive = true
                        },
                        new
                        {
                            EyeColorId = 3,
                            Description = "Normal",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("GenderId");

                    b.ToTable("LU_Gender");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            IsActive = true,
                            Name = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            IsActive = true,
                            Name = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            IsActive = true,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.HouseCategory", b =>
                {
                    b.Property<int>("HouseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HouseCategoryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("HouseCategoryId");

                    b.ToTable("LU_HouseCategory");

                    b.HasData(
                        new
                        {
                            HouseCategoryId = 1,
                            HouseCategoryName = "House Category 1",
                            IsActive = true
                        },
                        new
                        {
                            HouseCategoryId = 2,
                            HouseCategoryName = "House Category 2",
                            IsActive = true
                        },
                        new
                        {
                            HouseCategoryId = 3,
                            HouseCategoryName = "House Category 3",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.HouseType", b =>
                {
                    b.Property<int>("HouseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HouseTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("HouseTypeId");

                    b.ToTable("LU_HouseType");

                    b.HasData(
                        new
                        {
                            HouseTypeId = 1,
                            HouseTypeName = "Rent",
                            IsActive = true
                        },
                        new
                        {
                            HouseTypeId = 2,
                            HouseTypeName = "Owner",
                            IsActive = true
                        },
                        new
                        {
                            HouseTypeId = 3,
                            HouseTypeName = "Shared Rent",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.ISEEClassType", b =>
                {
                    b.Property<int>("ISEEClassTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISEEClassTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ISEEClassTypeId");

                    b.ToTable("LU_ISEEClassType");

                    b.HasData(
                        new
                        {
                            ISEEClassTypeId = 1,
                            ISEEClassTypeName = "High",
                            IsActive = true
                        },
                        new
                        {
                            ISEEClassTypeId = 2,
                            ISEEClassTypeName = "Middle",
                            IsActive = true
                        },
                        new
                        {
                            ISEEClassTypeId = 3,
                            ISEEClassTypeName = "Low",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.IncomeType", b =>
                {
                    b.Property<int>("IncomeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IncomeTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("IncomeTypeId");

                    b.ToTable("LU_IncomeType");

                    b.HasData(
                        new
                        {
                            IncomeTypeId = 1,
                            IncomeTypeName = "Single Income",
                            IsActive = true
                        },
                        new
                        {
                            IncomeTypeId = 2,
                            IncomeTypeName = "Double Income",
                            IsActive = true
                        },
                        new
                        {
                            IncomeTypeId = 3,
                            IncomeTypeName = "Business Income",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.InsuranceType", b =>
                {
                    b.Property<int>("InsuranceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("InsuranceTypeId");

                    b.ToTable("LU_InsuranceType");

                    b.HasData(
                        new
                        {
                            InsuranceTypeId = 1,
                            Description = "Car Insurance",
                            IsActive = true
                        },
                        new
                        {
                            InsuranceTypeId = 2,
                            Description = "Home Insurance",
                            IsActive = true
                        },
                        new
                        {
                            InsuranceTypeId = 3,
                            Description = "Health Insurance",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.JobDeliveryType", b =>
                {
                    b.Property<int>("JobDeliveryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobDeliveryTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("JobDeliveryTypeId");

                    b.ToTable("LU_JobDeliveryType");

                    b.HasData(
                        new
                        {
                            JobDeliveryTypeId = 1,
                            IsActive = true,
                            JobDeliveryTypeName = "Normal"
                        },
                        new
                        {
                            JobDeliveryTypeId = 2,
                            IsActive = true,
                            JobDeliveryTypeName = "Standard"
                        },
                        new
                        {
                            JobDeliveryTypeId = 3,
                            IsActive = true,
                            JobDeliveryTypeName = "Urgent"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.JobType", b =>
                {
                    b.Property<int>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("JobTypeId");

                    b.ToTable("LU_JobType");

                    b.HasData(
                        new
                        {
                            JobTypeId = 1,
                            IsActive = true,
                            JobTypeName = "Part-Time"
                        },
                        new
                        {
                            JobTypeId = 2,
                            IsActive = true,
                            JobTypeName = "Full-Time"
                        },
                        new
                        {
                            JobTypeId = 3,
                            IsActive = true,
                            JobTypeName = "Occational"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.LoanInterestType", b =>
                {
                    b.Property<int>("LoanInterestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LoanInterestTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LoanInterestTypeId");

                    b.ToTable("LU_LoanInterestType");

                    b.HasData(
                        new
                        {
                            LoanInterestTypeId = 1,
                            IsActive = true,
                            LoanInterestTypeName = "Fixed Interest"
                        },
                        new
                        {
                            LoanInterestTypeId = 2,
                            IsActive = true,
                            LoanInterestTypeName = "Variable Interest"
                        },
                        new
                        {
                            LoanInterestTypeId = 3,
                            IsActive = true,
                            LoanInterestTypeName = "No Interest"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.LoanStatusType", b =>
                {
                    b.Property<int>("LoanStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LoanStatusTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LoanStatusTypeId");

                    b.ToTable("LU_LoanStatusType");

                    b.HasData(
                        new
                        {
                            LoanStatusTypeId = 1,
                            IsActive = true,
                            LoanStatusTypeName = "Pending"
                        },
                        new
                        {
                            LoanStatusTypeId = 2,
                            IsActive = true,
                            LoanStatusTypeName = "Active"
                        },
                        new
                        {
                            LoanStatusTypeId = 3,
                            IsActive = true,
                            LoanStatusTypeName = "Past Due"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.MaritalStatus", b =>
                {
                    b.Property<int>("MeritalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("MeritalStatusId");

                    b.ToTable("LU_MeriatalStatus");

                    b.HasData(
                        new
                        {
                            MeritalStatusId = 1,
                            IsActive = true,
                            Name = "Single"
                        },
                        new
                        {
                            MeritalStatusId = 2,
                            IsActive = true,
                            Name = "Marrid"
                        },
                        new
                        {
                            MeritalStatusId = 3,
                            IsActive = true,
                            Name = "Divorce"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.MotiveType", b =>
                {
                    b.Property<int>("MotiveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MotiveTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("MotiveTypeId");

                    b.ToTable("LU_MotiveType");

                    b.HasData(
                        new
                        {
                            MotiveTypeId = 1,
                            IsActive = true,
                            MotiveTypeName = "Occupation"
                        },
                        new
                        {
                            MotiveTypeId = 2,
                            IsActive = true,
                            MotiveTypeName = "Family"
                        },
                        new
                        {
                            MotiveTypeId = 3,
                            IsActive = true,
                            MotiveTypeName = "Worker"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.NationalIdType", b =>
                {
                    b.Property<int>("NationalIdTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationalIdTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NationalIdTypeId");

                    b.ToTable("LU_NationalIdType");

                    b.HasData(
                        new
                        {
                            NationalIdTypeId = 1,
                            IsActive = true,
                            NationalIdTypeName = "Smart"
                        },
                        new
                        {
                            NationalIdTypeId = 2,
                            IsActive = true,
                            NationalIdTypeName = "Paper"
                        },
                        new
                        {
                            NationalIdTypeId = 3,
                            IsActive = true,
                            NationalIdTypeName = "Pending"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationalityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NationalityId");

                    b.ToTable("LU_Nationality");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            IsActive = true,
                            NationalityName = "Bangladeshi"
                        },
                        new
                        {
                            NationalityId = 2,
                            IsActive = true,
                            NationalityName = "Italian"
                        },
                        new
                        {
                            NationalityId = 3,
                            IsActive = true,
                            NationalityName = "Indian"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.OccupationPosition", b =>
                {
                    b.Property<int>("OccupationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OccupationPositionName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OccupationPositionId");

                    b.ToTable("LU_OccupationPosition");

                    b.HasData(
                        new
                        {
                            OccupationPositionId = 1,
                            IsActive = true,
                            OccupationPositionName = "UnEmployed"
                        },
                        new
                        {
                            OccupationPositionId = 2,
                            IsActive = true,
                            OccupationPositionName = "Employed"
                        },
                        new
                        {
                            OccupationPositionId = 3,
                            IsActive = true,
                            OccupationPositionName = "Shareholder"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.OccupationPositionType", b =>
                {
                    b.Property<int>("OccupationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("OccupationPositionId");

                    b.ToTable("LU_OccupationPositionType");

                    b.HasData(
                        new
                        {
                            OccupationPositionId = 1,
                            Description = "Manager",
                            IsActive = true
                        },
                        new
                        {
                            OccupationPositionId = 2,
                            Description = "Worker",
                            IsActive = true
                        },
                        new
                        {
                            OccupationPositionId = 3,
                            Description = "Employee",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.OccupationType", b =>
                {
                    b.Property<int>("OccupationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OccupationTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OccupationTypeId");

                    b.ToTable("LU_OccupationType");

                    b.HasData(
                        new
                        {
                            OccupationTypeId = 1,
                            IsActive = true,
                            OccupationTypeName = "Occupation Type 1"
                        },
                        new
                        {
                            OccupationTypeId = 2,
                            IsActive = true,
                            OccupationTypeName = "Occupation Type 2"
                        },
                        new
                        {
                            OccupationTypeId = 3,
                            IsActive = true,
                            OccupationTypeName = "Occupation Type 3"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.OwnerType", b =>
                {
                    b.Property<int>("OwnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OwnerTypeId");

                    b.ToTable("LU_OwnerType");

                    b.HasData(
                        new
                        {
                            OwnerTypeId = 1,
                            IsActive = true,
                            OwnerTypeName = "By Birth"
                        },
                        new
                        {
                            OwnerTypeId = 2,
                            IsActive = true,
                            OwnerTypeName = "Buy"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.RecordStatus", b =>
                {
                    b.Property<int>("RecordStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordStatusId");

                    b.ToTable("RecordStatus");
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.RelationType", b =>
                {
                    b.Property<int>("RelationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RelationTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RelationTypeId");

                    b.ToTable("LU_RelationType");

                    b.HasData(
                        new
                        {
                            RelationTypeId = 1,
                            IsActive = true,
                            RelationTypeName = "Father"
                        },
                        new
                        {
                            RelationTypeId = 2,
                            IsActive = true,
                            RelationTypeName = "Mother"
                        },
                        new
                        {
                            RelationTypeId = 3,
                            IsActive = true,
                            RelationTypeName = "Son"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.ResidenceScope", b =>
                {
                    b.Property<int>("ResidenceScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ResidenceScopeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ResidenceScopeId");

                    b.ToTable("LU_ResidenceScope");

                    b.HasData(
                        new
                        {
                            ResidenceScopeId = 1,
                            IsActive = true,
                            ResidenceScopeName = "Itally"
                        },
                        new
                        {
                            ResidenceScopeId = 2,
                            IsActive = true,
                            ResidenceScopeName = "Out of Itally"
                        },
                        new
                        {
                            ResidenceScopeId = 3,
                            IsActive = true,
                            ResidenceScopeName = "Not Permanent"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.SectionName", b =>
                {
                    b.Property<int>("SectionNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SectionDescription")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("SectionNameId");

                    b.ToTable("LU_SectionName");

                    b.HasData(
                        new
                        {
                            SectionNameId = 1,
                            IsActive = true,
                            SectionDescription = "Basic Info"
                        },
                        new
                        {
                            SectionNameId = 2,
                            IsActive = true,
                            SectionDescription = "Occupation Info"
                        },
                        new
                        {
                            SectionNameId = 3,
                            IsActive = true,
                            SectionDescription = "Family Info"
                        },
                        new
                        {
                            SectionNameId = 4,
                            IsActive = true,
                            SectionDescription = "Education Info"
                        },
                        new
                        {
                            SectionNameId = 5,
                            IsActive = true,
                            SectionDescription = "Address Info"
                        },
                        new
                        {
                            SectionNameId = 6,
                            IsActive = true,
                            SectionDescription = "House Rent Info"
                        },
                        new
                        {
                            SectionNameId = 7,
                            IsActive = true,
                            SectionDescription = "Document Info"
                        },
                        new
                        {
                            SectionNameId = 8,
                            IsActive = true,
                            SectionDescription = "Income Info"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.WorkerType", b =>
                {
                    b.Property<int>("WorkerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("WorkerTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("WorkerTypeId");

                    b.ToTable("LU_WorkerType");

                    b.HasData(
                        new
                        {
                            WorkerTypeId = 1,
                            IsActive = true,
                            WorkerTypeName = "Company Worker"
                        },
                        new
                        {
                            WorkerTypeId = 2,
                            IsActive = true,
                            WorkerTypeName = "Domestic Worker"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfAddressInfo", b =>
                {
                    b.Property<int>("AddressInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Active")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AppartmentNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<string>("FloorNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RoadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RoadNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AddressInfoId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfAddressInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfAssetInfo", b =>
                {
                    b.Property<int>("AssetInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnyRestrictionByGovt")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EquivalentMoneyMax")
                        .HasColumnType("int");

                    b.Property<int>("EquivalentMoneyMin")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MoneyAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAsset")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OwnerFromDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int>("OwnerTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnershipPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("RentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("UseAblePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("AssetInfoId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("OwnerTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfAssetInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfBankInfo", b =>
                {
                    b.Property<int>("BankInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("BankNameId")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("BankInfoId");

                    b.HasIndex("BankNameId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfBankInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfBasicInfo", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthStateCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CarNumberPlate")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CitizenStateCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CityOfBirth")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("DigitalVatCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpectedBabyBirthDate")
                        .HasColumnType("Date");

                    b.Property<int?>("EyeColorId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAnyUnEmployedFacility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasAppliedForCitizenship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasUnEmployedCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasVehicle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasVehicleInsurance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("HouseCityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HouseCountryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("HowManyHouseRent")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompanyOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHouseOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPregnant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRentHouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MotiveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalElectronicCertificate")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RefId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TaxCodeEndDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("TaxCodeStartDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("UnEmployedCertificateIssuesDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("YearlyIncome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("testData")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("EyeColorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("MotiveTypeId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OccupationPositionId");

                    b.HasIndex("OccupationTypeId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfBasicInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfDelegationInfo", b =>
                {
                    b.Property<int>("DelegationInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DocumentIssueDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("Date");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RefNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("DelegationInfoId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfDelegationInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfDocumentInfo", b =>
                {
                    b.Property<int>("DocumentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("IssuedDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("PurposeOfDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.HasKey("DocumentInfoId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfDocumentInfo");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfEducationInfo", b =>
                {
                    b.Property<int>("EducationInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivitiesAndSocieties")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DegreeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndYear")
                        .HasColumnType("Date");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartYear")
                        .HasColumnType("Date");

                    b.Property<string>("UniversityAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("EducationInfoId");

                    b.HasIndex("DegreeTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfEducationInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfFamilyInfo", b =>
                {
                    b.Property<int>("FamilyInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationCity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicationCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationFileNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicationPlacedAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ApplicationPlacedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<decimal>("DependentPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DisabledPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsAppliedForCitizenship")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDependent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NationlityId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PreviousNationalityId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ResidenceScopeId")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("YearlyIncome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("FamilyInfoId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OccupationTypeId");

                    b.HasIndex("PreviousNationalityId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("ResidenceScopeId");

                    b.ToTable("ProfFamilyInfo");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfHouseRentInfo", b =>
                {
                    b.Property<int>("HouseRentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Consistenza")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ContractDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("Date");

                    b.Property<string>("FoglioNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("HasLoan")
                        .HasColumnType("bit");

                    b.Property<int?>("HouseCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("HouseTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsJoined")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRentByOwner")
                        .HasColumnType("bit");

                    b.Property<decimal>("LoanAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("LoanInterestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanStartDate")
                        .HasColumnType("Date");

                    b.Property<int>("LoanStatusTypeID")
                        .HasColumnType("int");

                    b.Property<string>("MicroZona")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MonthlyRentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("NotaioInfo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PartiocellaNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationCity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("Date");

                    b.Property<string>("RegistrationInfo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RegistrationOffice")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Rendita")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("RentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("SectionNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("ServiceChargeAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SharePercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("SubNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SuperficieCatastale")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Zona")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("HouseRentInfoId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("HouseCategoryId");

                    b.HasIndex("HouseTypeId");

                    b.HasIndex("LoanInterestTypeId");

                    b.HasIndex("LoanStatusTypeID");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfHouseRentInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfISEEInfo", b =>
                {
                    b.Property<int>("ISEEInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("ISEAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("ISEEClassTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ISEEFamilyIncome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ISEEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ISPAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ISRAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("Date");

                    b.HasKey("ISEEInfoId");

                    b.HasIndex("ISEEClassTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfISEEInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfIncomeInfo", b =>
                {
                    b.Property<int>("IncomeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("IncomeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Month")
                        .HasColumnType("date");

                    b.Property<decimal>("MonthlyIncome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.Property<decimal>("YearlyIncome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("IncomeInfoId");

                    b.HasIndex("IncomeTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfIncomeInfo");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfInsuranceInfo", b =>
                {
                    b.Property<int>("InsuranceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<decimal>("InsuranceAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("InsuranceReturnPercentage")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("InsuranceTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("InsuranceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.HasKey("InsuranceInfoId");

                    b.HasIndex("InsuranceTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfInsuranceInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfLegalInfo", b =>
                {
                    b.Property<int>("LegalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CountryNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<bool?>("IsAnyCase")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RefNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("LegalInfoId");

                    b.HasIndex("CountryNameId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfLegalInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfMovementInfo", b =>
                {
                    b.Property<int>("MovementInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("MovementInfoId");

                    b.HasIndex("CountryNameId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfMovementInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfOccupationInfo", b =>
                {
                    b.Property<int>("OccupationInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATECONo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BranchAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ChamberOfCommerceCityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ChamberOfCommerceRegNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyRepresentative")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ContractEndDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<DateTime?>("ContractStartDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsShareHolder")
                        .HasColumnType("bit");

                    b.Property<decimal>("JobHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LegalCompanyAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotaioInfo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("PercentageOfShare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("REANo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SCIACityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SCIANo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("VATNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OccupationInfoId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.ToTable("ProfOccupationInfo");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfWorkerInfo", b =>
                {
                    b.Property<int>("WorkerInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MonthlySalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("WorkerTypeId")
                        .HasColumnType("int");

                    b.HasKey("WorkerInfoId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecordStatusId");

                    b.HasIndex("WorkerTypeId");

                    b.ToTable("ProfWorkerInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.QuestionInfo", b =>
                {
                    b.Property<int>("QuestionInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PageToUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionNameId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("QuestionInfoId");

                    b.HasIndex("RecordStatusId");

                    b.HasIndex("SectionNameId");

                    b.ToTable("QuestionInfos");
                });

            modelBuilder.Entity("Architecture.Core.Entities.SectionLink", b =>
                {
                    b.Property<int>("SectionLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("SectionNameId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("SectionLinkId");

                    b.HasIndex("RecordStatusId");

                    b.HasIndex("SectionNameId");

                    b.ToTable("SectionLinks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.AppUserStatus", "AppUserStatus")
                        .WithMany()
                        .HasForeignKey("AppUserStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.AppUserType", "AppUserType")
                        .WithMany()
                        .HasForeignKey("AppUserTypeId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Architecture.Core.Entities.BranchInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.JobInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.ISEEClassType", "ISEEClassType")
                        .WithMany()
                        .HasForeignKey("ISEEClassTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.JobDeliveryType", "JobDeliveryType")
                        .WithMany()
                        .HasForeignKey("JobDeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.OccupationType", "OccupationType")
                        .WithMany()
                        .HasForeignKey("OccupationTypeId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.JobSectionLink", b =>
                {
                    b.HasOne("Architecture.Core.Entities.JobInfo", null)
                        .WithMany("JobSectionLink")
                        .HasForeignKey("JobInfoId");

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.SectionName", "SectionName")
                        .WithMany()
                        .HasForeignKey("SectionNameId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfAddressInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfAddressInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfAssetInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.OwnerType", "OwnerType")
                        .WithMany()
                        .HasForeignKey("OwnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfAssetInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfBankInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.BankName", "BankName")
                        .WithMany()
                        .HasForeignKey("BankNameId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfBankInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfBasicInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.EyeColor", "EyeColor")
                        .WithMany()
                        .HasForeignKey("EyeColorId");

                    b.HasOne("Architecture.Core.Entities.LU.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Architecture.Core.Entities.LU.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.MotiveType", "MotiveType")
                        .WithMany()
                        .HasForeignKey("MotiveTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("Architecture.Core.Entities.LU.OccupationPosition", "OccupationPosition")
                        .WithMany()
                        .HasForeignKey("OccupationPositionId");

                    b.HasOne("Architecture.Core.Entities.LU.OccupationType", "OccupationType")
                        .WithMany()
                        .HasForeignKey("OccupationTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfDelegationInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfDelegationInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfDocumentInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfDocumentInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfEducationInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.DegreeType", "DegreeType")
                        .WithMany()
                        .HasForeignKey("DegreeTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfEducationInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfFamilyInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("Architecture.Core.Entities.LU.OccupationType", "OccupationType")
                        .WithMany()
                        .HasForeignKey("OccupationTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.Nationality", "PreviousNationality")
                        .WithMany()
                        .HasForeignKey("PreviousNationalityId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfFamilyInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.RelationType", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.ResidenceScope", "ResidenceScope")
                        .WithMany()
                        .HasForeignKey("ResidenceScopeId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfHouseRentInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.HouseCategory", "HouseCategory")
                        .WithMany()
                        .HasForeignKey("HouseCategoryId");

                    b.HasOne("Architecture.Core.Entities.LU.HouseType", "HouseType")
                        .WithMany()
                        .HasForeignKey("HouseTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.LoanInterestType", "LoanInterestType")
                        .WithMany()
                        .HasForeignKey("LoanInterestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.LoanStatusType", "LoanStatusType")
                        .WithMany()
                        .HasForeignKey("LoanStatusTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfHouseRentInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfISEEInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.ISEEClassType", "ISEEClassType")
                        .WithMany()
                        .HasForeignKey("ISEEClassTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfISEEInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfIncomeInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.IncomeType", "IncomeType")
                        .WithMany()
                        .HasForeignKey("IncomeTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfIncomeInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfInsuranceInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.InsuranceType", "InsuranceType")
                        .WithMany()
                        .HasForeignKey("InsuranceTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfInsuranceInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfLegalInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.CountryName", "CountryName")
                        .WithMany()
                        .HasForeignKey("CountryNameId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfLegalInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfMovementInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.CountryName", "CountryName")
                        .WithMany()
                        .HasForeignKey("CountryNameId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfMovementInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfOccupationInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId");

                    b.HasOne("Architecture.Core.Entities.LU.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfOccupationInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfWorkerInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ProfBasicInfo", "ProfBasicInfo")
                        .WithMany("ProfWorkerInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.WorkerType", "WorkerType")
                        .WithMany()
                        .HasForeignKey("WorkerTypeId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.QuestionInfo", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.SectionName", "SectionName")
                        .WithMany()
                        .HasForeignKey("SectionNameId");
                });

            modelBuilder.Entity("Architecture.Core.Entities.SectionLink", b =>
                {
                    b.HasOne("Architecture.Core.Entities.LU.RecordStatus", "RecordStatus")
                        .WithMany()
                        .HasForeignKey("RecordStatusId");

                    b.HasOne("Architecture.Core.Entities.LU.SectionName", "SectionName")
                        .WithMany()
                        .HasForeignKey("SectionNameId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
