// <auto-generated />
using System;
using Architecture.Core.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Architecture.Core.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201007142203_lookup-table-added")]
    partial class lookuptableadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastPassChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("PasswordChangedCount")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Architecture.Core.Entities.Example", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("ContractTypeId");

                    b.ToTable("LU_ContractType");

                    b.HasData(
                        new
                        {
                            ContractTypeId = 1,
                            ContractTypeName = "No Limit",
                            IsActive = true
                        },
                        new
                        {
                            ContractTypeId = 2,
                            ContractTypeName = "Limited",
                            IsActive = true
                        },
                        new
                        {
                            ContractTypeId = 3,
                            ContractTypeName = "Occational",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("DocumentTypeId");

                    b.ToTable("LU_DocumentType");

                    b.HasData(
                        new
                        {
                            DocumentTypeId = 1,
                            DocumentName = "Passport",
                            IsActive = true
                        },
                        new
                        {
                            DocumentTypeId = 2,
                            DocumentName = "Driving License",
                            IsActive = true
                        },
                        new
                        {
                            DocumentTypeId = 3,
                            DocumentName = "National Id",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("GenderId");

                    b.ToTable("LU_Gender");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            IsActive = true,
                            Name = "Male"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.HouseCategory", b =>
                {
                    b.Property<int>("HouseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HouseCategoryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("HouseCategoryId");

                    b.ToTable("LU_HouseCategory");

                    b.HasData(
                        new
                        {
                            HouseCategoryId = 1,
                            HouseCategoryName = "House Category 1",
                            IsActive = true
                        },
                        new
                        {
                            HouseCategoryId = 2,
                            HouseCategoryName = "House Category 2",
                            IsActive = true
                        },
                        new
                        {
                            HouseCategoryId = 3,
                            HouseCategoryName = "House Category 3",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.HouseType", b =>
                {
                    b.Property<int>("HouseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HouseTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("HouseTypeId");

                    b.ToTable("LU_HouseType");

                    b.HasData(
                        new
                        {
                            HouseTypeId = 1,
                            HouseTypeName = "Rent",
                            IsActive = true
                        },
                        new
                        {
                            HouseTypeId = 2,
                            HouseTypeName = "Owner",
                            IsActive = true
                        },
                        new
                        {
                            HouseTypeId = 3,
                            HouseTypeName = "Shared Rent",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.IncomeType", b =>
                {
                    b.Property<int>("IncomeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IncomeTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("IncomeTypeId");

                    b.ToTable("LU_IncomeType");

                    b.HasData(
                        new
                        {
                            IncomeTypeId = 1,
                            IncomeTypeName = "Single Income",
                            IsActive = true
                        },
                        new
                        {
                            IncomeTypeId = 2,
                            IncomeTypeName = "Double Income",
                            IsActive = true
                        },
                        new
                        {
                            IncomeTypeId = 3,
                            IncomeTypeName = "Business Income",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.JobType", b =>
                {
                    b.Property<int>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("JobTypeId");

                    b.ToTable("LU_JobType");

                    b.HasData(
                        new
                        {
                            JobTypeId = 1,
                            IsActive = true,
                            JobTypeName = "Part-Time"
                        },
                        new
                        {
                            JobTypeId = 2,
                            IsActive = true,
                            JobTypeName = "Full-Time"
                        },
                        new
                        {
                            JobTypeId = 3,
                            IsActive = true,
                            JobTypeName = "Occational"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.LoanInterestType", b =>
                {
                    b.Property<int>("LoanInterestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LoanInterestTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LoanInterestTypeId");

                    b.ToTable("LU_LoanInterestType");

                    b.HasData(
                        new
                        {
                            LoanInterestTypeId = 1,
                            IsActive = true,
                            LoanInterestTypeName = "Fixed Interest"
                        },
                        new
                        {
                            LoanInterestTypeId = 2,
                            IsActive = true,
                            LoanInterestTypeName = "Variable Interest"
                        },
                        new
                        {
                            LoanInterestTypeId = 3,
                            IsActive = true,
                            LoanInterestTypeName = "No Interest"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.MeriatalStatus", b =>
                {
                    b.Property<int>("MeritalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("MeritalStatusId");

                    b.ToTable("LU_MeriatalStatus");

                    b.HasData(
                        new
                        {
                            MeritalStatusId = 1,
                            IsActive = true,
                            Name = "Single"
                        },
                        new
                        {
                            MeritalStatusId = 2,
                            IsActive = true,
                            Name = "Marrid"
                        },
                        new
                        {
                            MeritalStatusId = 3,
                            IsActive = true,
                            Name = "Divorce"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.NationalIdType", b =>
                {
                    b.Property<int>("NationalIdTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NationalIdTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NationalIdTypeId");

                    b.ToTable("LU_NationalIdType");

                    b.HasData(
                        new
                        {
                            NationalIdTypeId = 1,
                            IsActive = true,
                            NationalIdTypeName = "Smart"
                        },
                        new
                        {
                            NationalIdTypeId = 2,
                            IsActive = true,
                            NationalIdTypeName = "Paper"
                        },
                        new
                        {
                            NationalIdTypeId = 3,
                            IsActive = true,
                            NationalIdTypeName = "Pending"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NationalityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NationalityId");

                    b.ToTable("LU_Nationality");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            IsActive = true,
                            NationalityName = "Bangladeshi"
                        },
                        new
                        {
                            NationalityId = 2,
                            IsActive = true,
                            NationalityName = "Italian"
                        },
                        new
                        {
                            NationalityId = 3,
                            IsActive = true,
                            NationalityName = "Indian"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.OccupationPosition", b =>
                {
                    b.Property<int>("OccupationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("OccupationPositionName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OccupationPositionId");

                    b.ToTable("LU_OccupationPosition");

                    b.HasData(
                        new
                        {
                            OccupationPositionId = 1,
                            IsActive = true,
                            OccupationPositionName = "UnEmployed"
                        },
                        new
                        {
                            OccupationPositionId = 2,
                            IsActive = true,
                            OccupationPositionName = "Employed"
                        },
                        new
                        {
                            OccupationPositionId = 3,
                            IsActive = true,
                            OccupationPositionName = "Shareholder"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.OccupationType", b =>
                {
                    b.Property<int>("OccupationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("OccupationTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OccupationTypeId");

                    b.ToTable("LU_OccupationType");

                    b.HasData(
                        new
                        {
                            OccupationTypeId = 1,
                            IsActive = true,
                            OccupationTypeName = "Occupation Type 1"
                        },
                        new
                        {
                            OccupationTypeId = 2,
                            IsActive = true,
                            OccupationTypeName = "Occupation Type 2"
                        },
                        new
                        {
                            OccupationTypeId = 3,
                            IsActive = true,
                            OccupationTypeName = "Occupation Type 3"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.RelationType", b =>
                {
                    b.Property<int>("RelationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RelationTypeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RelationTypeId");

                    b.ToTable("LU_RelationType");

                    b.HasData(
                        new
                        {
                            RelationTypeId = 1,
                            IsActive = true,
                            RelationTypeName = "Father"
                        },
                        new
                        {
                            RelationTypeId = 2,
                            IsActive = true,
                            RelationTypeName = "Mother"
                        },
                        new
                        {
                            RelationTypeId = 3,
                            IsActive = true,
                            RelationTypeName = "Son"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.LU.ResidenceScope", b =>
                {
                    b.Property<int>("ResidenceScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ResidenceScopeName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ResidenceScopeId");

                    b.ToTable("LU_ResidenceScope");

                    b.HasData(
                        new
                        {
                            ResidenceScopeId = 1,
                            IsActive = true,
                            ResidenceScopeName = "Itally"
                        },
                        new
                        {
                            ResidenceScopeId = 2,
                            IsActive = true,
                            ResidenceScopeName = "Out of Itally"
                        },
                        new
                        {
                            ResidenceScopeId = 3,
                            IsActive = true,
                            ResidenceScopeName = "Not Permanent"
                        });
                });

            modelBuilder.Entity("Architecture.Core.Entities.ProfBasicInfo", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthStateCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CarNumberPlate")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CitizenStateCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CityOfBirth")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("DigitalVatCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EyesColorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAnyUnEmployedFacility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasAppliedForCitizenship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasUnEmployedCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasVehicle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasVehicleInsurance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("HouseCityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HouseCountryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("HowManyHouseRent")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompanyOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHouseOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRentHouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GetUtcDate()");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MotiveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalElectronicCertificate")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TaxCodeEndDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("TaxCodeStartDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("UnEmployedCertificateIssuesDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("YearlyIncome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ProfileId");

                    b.ToTable("ProfBasicInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Architecture.Core.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Architecture.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Architecture.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
